=begin
#Money Forward Kessai API v2

#Money Forward Kessai REST API

The version of the OpenAPI document: 2.6.7
Contact: api.support@mfkessai.co.jp
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.1

=end

require 'date'
require 'time'

module MfkOpenapiRubyClient
  class TransactionDetailPayload
    # 小計です。単価(`unit_price`)×数量(`quantity`)の金額を指定してください。またはその金額の税込金額も指定可能です。
    attr_accessor :amount

    # 小計を文字列で指定してください。こちらが指定されている場合、数値型のamountは無視されます。単価(`unit_price`)×数量(`quantity`)の金額を指定してください。
    attr_accessor :amount_str

    # 商品名などです。<br>Sandbox環境において取引審査で任意の結果を指定するためにこの値を用います。詳しくは[審査結果の操作](#environment_magic_number)を参照ください。
    attr_accessor :description

    attr_accessor :tax_included_type

    attr_accessor :tax_rate_type

    # 数量を指定してください。
    attr_accessor :quantity

    # 数量を文字列で指定してください。こちらが指定されている場合、数値型のquantityは無視されます。
    attr_accessor :quantity_str

    # 単価を指定してください。
    attr_accessor :unit_price

    # 単価を文字列で指定してください。こちらが指定されている場合、数値型のunit_priceは無視されます。
    attr_accessor :unit_price_str

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'amount' => :'amount',
        :'amount_str' => :'amount_str',
        :'description' => :'description',
        :'tax_included_type' => :'tax_included_type',
        :'tax_rate_type' => :'tax_rate_type',
        :'quantity' => :'quantity',
        :'quantity_str' => :'quantity_str',
        :'unit_price' => :'unit_price',
        :'unit_price_str' => :'unit_price_str'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'amount' => :'Float',
        :'amount_str' => :'String',
        :'description' => :'String',
        :'tax_included_type' => :'TaxIncludedType',
        :'tax_rate_type' => :'TaxRateType',
        :'quantity' => :'Float',
        :'quantity_str' => :'String',
        :'unit_price' => :'Float',
        :'unit_price_str' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `MfkOpenapiRubyClient::TransactionDetailPayload` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `MfkOpenapiRubyClient::TransactionDetailPayload`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.key?(:'amount_str')
        self.amount_str = attributes[:'amount_str']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'tax_included_type')
        self.tax_included_type = attributes[:'tax_included_type']
      end

      if attributes.key?(:'tax_rate_type')
        self.tax_rate_type = attributes[:'tax_rate_type']
      end

      if attributes.key?(:'quantity')
        self.quantity = attributes[:'quantity']
      end

      if attributes.key?(:'quantity_str')
        self.quantity_str = attributes[:'quantity_str']
      end

      if attributes.key?(:'unit_price')
        self.unit_price = attributes[:'unit_price']
      end

      if attributes.key?(:'unit_price_str')
        self.unit_price_str = attributes[:'unit_price_str']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@amount.nil? && @amount > 2147483647
        invalid_properties.push('invalid value for "amount", must be smaller than or equal to 2147483647.')
      end

      if !@amount.nil? && @amount < -2147483648
        invalid_properties.push('invalid value for "amount", must be greater than or equal to -2147483648.')
      end

      if !@amount_str.nil? && @amount_str.to_s.length > 16
        invalid_properties.push('invalid value for "amount_str", the character length must be smaller than or equal to 16.')
      end

      if !@amount_str.nil? && @amount_str.to_s.length < 1
        invalid_properties.push('invalid value for "amount_str", the character length must be great than or equal to 1.')
      end

      pattern = Regexp.new(/^-?\d+(\.\d{1,4})?$/)
      if !@amount_str.nil? && @amount_str !~ pattern
        invalid_properties.push("invalid value for \"amount_str\", must conform to the pattern #{pattern}.")
      end

      if @description.nil?
        invalid_properties.push('invalid value for "description", description cannot be nil.')
      end

      if @description.to_s.length > 250
        invalid_properties.push('invalid value for "description", the character length must be smaller than or equal to 250.')
      end

      if @description.to_s.length < 1
        invalid_properties.push('invalid value for "description", the character length must be great than or equal to 1.')
      end

      if @tax_included_type.nil?
        invalid_properties.push('invalid value for "tax_included_type", tax_included_type cannot be nil.')
      end

      if @tax_rate_type.nil?
        invalid_properties.push('invalid value for "tax_rate_type", tax_rate_type cannot be nil.')
      end

      if !@quantity.nil? && @quantity > 2147483647
        invalid_properties.push('invalid value for "quantity", must be smaller than or equal to 2147483647.')
      end

      if !@quantity.nil? && @quantity < 0
        invalid_properties.push('invalid value for "quantity", must be greater than or equal to 0.')
      end

      if !@quantity_str.nil? && @quantity_str.to_s.length > 16
        invalid_properties.push('invalid value for "quantity_str", the character length must be smaller than or equal to 16.')
      end

      if !@quantity_str.nil? && @quantity_str.to_s.length < 1
        invalid_properties.push('invalid value for "quantity_str", the character length must be great than or equal to 1.')
      end

      pattern = Regexp.new(/^\d+(\.\d{1,4})?$/)
      if !@quantity_str.nil? && @quantity_str !~ pattern
        invalid_properties.push("invalid value for \"quantity_str\", must conform to the pattern #{pattern}.")
      end

      if !@unit_price.nil? && @unit_price > 2147483647
        invalid_properties.push('invalid value for "unit_price", must be smaller than or equal to 2147483647.')
      end

      if !@unit_price.nil? && @unit_price < -2147483648
        invalid_properties.push('invalid value for "unit_price", must be greater than or equal to -2147483648.')
      end

      if !@unit_price_str.nil? && @unit_price_str.to_s.length > 16
        invalid_properties.push('invalid value for "unit_price_str", the character length must be smaller than or equal to 16.')
      end

      if !@unit_price_str.nil? && @unit_price_str.to_s.length < 1
        invalid_properties.push('invalid value for "unit_price_str", the character length must be great than or equal to 1.')
      end

      pattern = Regexp.new(/^-?\d+(\.\d{1,4})?$/)
      if !@unit_price_str.nil? && @unit_price_str !~ pattern
        invalid_properties.push("invalid value for \"unit_price_str\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@amount.nil? && @amount > 2147483647
      return false if !@amount.nil? && @amount < -2147483648
      return false if !@amount_str.nil? && @amount_str.to_s.length > 16
      return false if !@amount_str.nil? && @amount_str.to_s.length < 1
      return false if !@amount_str.nil? && @amount_str !~ Regexp.new(/^-?\d+(\.\d{1,4})?$/)
      return false if @description.nil?
      return false if @description.to_s.length > 250
      return false if @description.to_s.length < 1
      return false if @tax_included_type.nil?
      return false if @tax_rate_type.nil?
      return false if !@quantity.nil? && @quantity > 2147483647
      return false if !@quantity.nil? && @quantity < 0
      return false if !@quantity_str.nil? && @quantity_str.to_s.length > 16
      return false if !@quantity_str.nil? && @quantity_str.to_s.length < 1
      return false if !@quantity_str.nil? && @quantity_str !~ Regexp.new(/^\d+(\.\d{1,4})?$/)
      return false if !@unit_price.nil? && @unit_price > 2147483647
      return false if !@unit_price.nil? && @unit_price < -2147483648
      return false if !@unit_price_str.nil? && @unit_price_str.to_s.length > 16
      return false if !@unit_price_str.nil? && @unit_price_str.to_s.length < 1
      return false if !@unit_price_str.nil? && @unit_price_str !~ Regexp.new(/^-?\d+(\.\d{1,4})?$/)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] amount Value to be assigned
    def amount=(amount)
      if !amount.nil? && amount > 2147483647
        fail ArgumentError, 'invalid value for "amount", must be smaller than or equal to 2147483647.'
      end

      if !amount.nil? && amount < -2147483648
        fail ArgumentError, 'invalid value for "amount", must be greater than or equal to -2147483648.'
      end

      @amount = amount
    end

    # Custom attribute writer method with validation
    # @param [Object] amount_str Value to be assigned
    def amount_str=(amount_str)
      if !amount_str.nil? && amount_str.to_s.length > 16
        fail ArgumentError, 'invalid value for "amount_str", the character length must be smaller than or equal to 16.'
      end

      if !amount_str.nil? && amount_str.to_s.length < 1
        fail ArgumentError, 'invalid value for "amount_str", the character length must be great than or equal to 1.'
      end

      pattern = Regexp.new(/^-?\d+(\.\d{1,4})?$/)
      if !amount_str.nil? && amount_str !~ pattern
        fail ArgumentError, "invalid value for \"amount_str\", must conform to the pattern #{pattern}."
      end

      @amount_str = amount_str
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if description.nil?
        fail ArgumentError, 'description cannot be nil'
      end

      if description.to_s.length > 250
        fail ArgumentError, 'invalid value for "description", the character length must be smaller than or equal to 250.'
      end

      if description.to_s.length < 1
        fail ArgumentError, 'invalid value for "description", the character length must be great than or equal to 1.'
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] quantity Value to be assigned
    def quantity=(quantity)
      if !quantity.nil? && quantity > 2147483647
        fail ArgumentError, 'invalid value for "quantity", must be smaller than or equal to 2147483647.'
      end

      if !quantity.nil? && quantity < 0
        fail ArgumentError, 'invalid value for "quantity", must be greater than or equal to 0.'
      end

      @quantity = quantity
    end

    # Custom attribute writer method with validation
    # @param [Object] quantity_str Value to be assigned
    def quantity_str=(quantity_str)
      if !quantity_str.nil? && quantity_str.to_s.length > 16
        fail ArgumentError, 'invalid value for "quantity_str", the character length must be smaller than or equal to 16.'
      end

      if !quantity_str.nil? && quantity_str.to_s.length < 1
        fail ArgumentError, 'invalid value for "quantity_str", the character length must be great than or equal to 1.'
      end

      pattern = Regexp.new(/^\d+(\.\d{1,4})?$/)
      if !quantity_str.nil? && quantity_str !~ pattern
        fail ArgumentError, "invalid value for \"quantity_str\", must conform to the pattern #{pattern}."
      end

      @quantity_str = quantity_str
    end

    # Custom attribute writer method with validation
    # @param [Object] unit_price Value to be assigned
    def unit_price=(unit_price)
      if !unit_price.nil? && unit_price > 2147483647
        fail ArgumentError, 'invalid value for "unit_price", must be smaller than or equal to 2147483647.'
      end

      if !unit_price.nil? && unit_price < -2147483648
        fail ArgumentError, 'invalid value for "unit_price", must be greater than or equal to -2147483648.'
      end

      @unit_price = unit_price
    end

    # Custom attribute writer method with validation
    # @param [Object] unit_price_str Value to be assigned
    def unit_price_str=(unit_price_str)
      if !unit_price_str.nil? && unit_price_str.to_s.length > 16
        fail ArgumentError, 'invalid value for "unit_price_str", the character length must be smaller than or equal to 16.'
      end

      if !unit_price_str.nil? && unit_price_str.to_s.length < 1
        fail ArgumentError, 'invalid value for "unit_price_str", the character length must be great than or equal to 1.'
      end

      pattern = Regexp.new(/^-?\d+(\.\d{1,4})?$/)
      if !unit_price_str.nil? && unit_price_str !~ pattern
        fail ArgumentError, "invalid value for \"unit_price_str\", must conform to the pattern #{pattern}."
      end

      @unit_price_str = unit_price_str
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          amount == o.amount &&
          amount_str == o.amount_str &&
          description == o.description &&
          tax_included_type == o.tax_included_type &&
          tax_rate_type == o.tax_rate_type &&
          quantity == o.quantity &&
          quantity_str == o.quantity_str &&
          unit_price == o.unit_price &&
          unit_price_str == o.unit_price_str
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [amount, amount_str, description, tax_included_type, tax_rate_type, quantity, quantity_str, unit_price, unit_price_str].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = MfkOpenapiRubyClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
